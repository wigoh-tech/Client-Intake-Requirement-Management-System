generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  username String
  password String
  role     String?
  status   String?
  clerkId  String?   @unique
  clients  Client[]
  comments Comment[] // One-to-many relation: User â†’ Comment
}

model Client {
  id                  String               @id @default(dbgenerated()) // or use nanoid in code
  userId              Int?
  user                User?                @relation(fields: [userId], references: [id])
  userName            String
  email               String               @unique
  answers             IntakeAnswer[]
  requirementVersions RequirementVersion[] @relation("RequirementClient")
  requirements        Requirement[]
  assignedForm        AssignedForm?        @relation("ClientAssignedForm")
}

model IntakeQuestion {
  id        Int            @id @default(autoincrement())
  question  String
  fieldType String
  options   String? // e.g. "text", "radio", "textarea"
  answers   IntakeAnswer[]
}

model IntakeAnswer {
  id         Int      @id @default(autoincrement())
  clientId   String
  questionId Int
  answer     String
  timestamp  DateTime @default(now())

  client        Client         @relation(fields: [clientId], references: [id])
  question      IntakeQuestion @relation(fields: [questionId], references: [id])
  uploadedFiles UploadFile[]

  @@index([clientId]) // Optional index to optimize queries
}

model Requirement {
  id        Int               @id @default(autoincrement())
  clientId  String
  answer    String // Answer to question 14
  createdAt DateTime          @default(now())
  status    RequirementStatus @default(todo)

  client Client @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

enum RequirementStatus {
  todo
  inProgress
  done
}

model UploadFile {
  id             Int @id @default(autoincrement())
  intakeAnswerId Int

  intakeAnswer IntakeAnswer @relation(fields: [intakeAnswerId], references: [id])
  filePath     String?
  fileContent  Bytes? // <-- for storing file in DB
  createdAt    DateTime     @default(now())
}

model RequirementVersion {
  id        Int       @id @default(autoincrement())
  version   String
  content   Json
  clerkId   String?
  userName  String?
  createdAt DateTime  @default(now())
  clients   Client[]  @relation("RequirementClient")
  comments  Comment[] @relation("RequirementVersionComments")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   Json
  reply     Json?
  author    Json?
  sender    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  requirementVersionId Int
  requirementVersion   RequirementVersion @relation("RequirementVersionComments", fields: [requirementVersionId], references: [id])
}

model userNotification {
  id        Int      @id @default(autoincrement())
  clientId  String
  message   String
  formId    Int
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
}

model formAssignments {
  id          Int      @id @default(autoincrement())
  clientId    String
  questionIds Int[]
  createdAt   DateTime @default(now())
}

